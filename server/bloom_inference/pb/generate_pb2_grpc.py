# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import generate_pb2 as generate__pb2


class TextGenerationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ServiceDiscovery = channel.unary_unary(
                '/generate.v1.TextGeneration/ServiceDiscovery',
                request_serializer=generate__pb2.Empty.SerializeToString,
                response_deserializer=generate__pb2.ServiceDiscoveryResponse.FromString,
                )
        self.ClearCache = channel.unary_unary(
                '/generate.v1.TextGeneration/ClearCache',
                request_serializer=generate__pb2.Empty.SerializeToString,
                response_deserializer=generate__pb2.Empty.FromString,
                )
        self.Generate = channel.unary_unary(
                '/generate.v1.TextGeneration/Generate',
                request_serializer=generate__pb2.Batch.SerializeToString,
                response_deserializer=generate__pb2.Response.FromString,
                )
        self.GenerateWithCache = channel.unary_unary(
                '/generate.v1.TextGeneration/GenerateWithCache',
                request_serializer=generate__pb2.BatchCached.SerializeToString,
                response_deserializer=generate__pb2.Response.FromString,
                )


class TextGenerationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ServiceDiscovery(self, request, context):
        """/ Service discovery
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearCache(self, request, context):
        """/ Empties batch cache
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Generate(self, request, context):
        """/ Generate tokens for a batch without cache
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateWithCache(self, request, context):
        """/ Generate tokens for a batch with cache
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextGenerationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ServiceDiscovery': grpc.unary_unary_rpc_method_handler(
                    servicer.ServiceDiscovery,
                    request_deserializer=generate__pb2.Empty.FromString,
                    response_serializer=generate__pb2.ServiceDiscoveryResponse.SerializeToString,
            ),
            'ClearCache': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearCache,
                    request_deserializer=generate__pb2.Empty.FromString,
                    response_serializer=generate__pb2.Empty.SerializeToString,
            ),
            'Generate': grpc.unary_unary_rpc_method_handler(
                    servicer.Generate,
                    request_deserializer=generate__pb2.Batch.FromString,
                    response_serializer=generate__pb2.Response.SerializeToString,
            ),
            'GenerateWithCache': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateWithCache,
                    request_deserializer=generate__pb2.BatchCached.FromString,
                    response_serializer=generate__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'generate.v1.TextGeneration', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TextGeneration(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ServiceDiscovery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v1.TextGeneration/ServiceDiscovery',
            generate__pb2.Empty.SerializeToString,
            generate__pb2.ServiceDiscoveryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v1.TextGeneration/ClearCache',
            generate__pb2.Empty.SerializeToString,
            generate__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Generate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v1.TextGeneration/Generate',
            generate__pb2.Batch.SerializeToString,
            generate__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateWithCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v1.TextGeneration/GenerateWithCache',
            generate__pb2.BatchCached.SerializeToString,
            generate__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
